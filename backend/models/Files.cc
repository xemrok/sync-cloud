/**
 *
 *  Files.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Files.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sync_cloud;

const std::string Files::Cols::__id = "_id";
const std::string Files::Cols::_user_id = "user_id";
const std::string Files::Cols::_path = "path";
const std::string Files::Cols::_filename = "filename";
const std::string Files::Cols::_status = "status";
const std::string Files::Cols::_hash_sum = "hash_sum";
const std::string Files::Cols::_updated_at = "updated_at";
const std::string Files::Cols::_created_at = "created_at";
const std::string Files::primaryKeyName = "_id";
const bool Files::hasPrimaryKey = true;
const std::string Files::tableName = "files";

const std::vector<typename Files::MetaData> Files::metaData_ = {
    {"_id", "int32_t", "integer", 4, 1, 1, 1},
    {"user_id", "int32_t", "integer", 4, 0, 0, 1},
    {"path", "std::string", "text", 0, 0, 0, 1},
    {"filename", "std::string", "text", 0, 0, 0, 1},
    {"status", "std::string", "USER-DEFINED", 0, 0, 0, 1},
    {"hash_sum", "std::string", "text", 0, 0, 0, 1},
    {"updated_at", "::trantor::Date", "timestamp with time zone", 0, 0, 0, 1},
    {"created_at", "::trantor::Date", "timestamp with time zone", 0, 0, 0, 1}};
const std::string &Files::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Files::Files(const Row &r, const ssize_t indexOffset) noexcept
{
    if (indexOffset < 0)
    {
        if (!r["_id"].isNull())
        {
            Id_ = std::make_shared<int32_t>(r["_id"].as<int32_t>());
        }
        if (!r["user_id"].isNull())
        {
            userId_ = std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if (!r["path"].isNull())
        {
            path_ = std::make_shared<std::string>(r["path"].as<std::string>());
        }
        if (!r["filename"].isNull())
        {
            filename_ = std::make_shared<std::string>(r["filename"].as<std::string>());
        }
        if (!r["status"].isNull())
        {
            status_ = std::make_shared<std::string>(r["status"].as<std::string>());
        }
        if (!r["hash_sum"].isNull())
        {
            hashSum_ = std::make_shared<std::string>(r["hash_sum"].as<std::string>());
        }
        if (!r["updated_at"].isNull())
        {
            auto timeStr = r["updated_at"].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
        if (!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if (offset + 8 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if (!r[index].isNull())
        {
            Id_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if (!r[index].isNull())
        {
            userId_ = std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if (!r[index].isNull())
        {
            path_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if (!r[index].isNull())
        {
            filename_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if (!r[index].isNull())
        {
            status_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if (!r[index].isNull())
        {
            hashSum_ = std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if (!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
        index = offset + 7;
        if (!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

Files::Files(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            Id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            path_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            filename_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            status_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            hashSum_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

Files::Files(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("_id"))
    {
        dirtyFlag_[0] = true;
        if (!pJson["_id"].isNull())
        {
            Id_ = std::make_shared<int32_t>((int32_t)pJson["_id"].asInt64());
        }
    }
    if (pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["user_id"].isNull())
        {
            userId_ = std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if (pJson.isMember("path"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["path"].isNull())
        {
            path_ = std::make_shared<std::string>(pJson["path"].asString());
        }
    }
    if (pJson.isMember("filename"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["filename"].isNull())
        {
            filename_ = std::make_shared<std::string>(pJson["filename"].asString());
        }
    }
    if (pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["status"].isNull())
        {
            status_ = std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if (pJson.isMember("hash_sum"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["hash_sum"].isNull())
        {
            hashSum_ = std::make_shared<std::string>(pJson["hash_sum"].asString());
        }
    }
    if (pJson.isMember("updated_at"))
    {
        dirtyFlag_[6] = true;
        if (!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (pJson.isMember("created_at"))
    {
        dirtyFlag_[7] = true;
        if (!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

void Files::updateByMasqueradedJson(const Json::Value &pJson,
                                    const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if (pMasqueradingVector.size() != 8)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if (!pJson[pMasqueradingVector[0]].isNull())
        {
            Id_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if (!pJson[pMasqueradingVector[1]].isNull())
        {
            userId_ = std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if (!pJson[pMasqueradingVector[2]].isNull())
        {
            path_ = std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if (!pJson[pMasqueradingVector[3]].isNull())
        {
            filename_ = std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if (!pJson[pMasqueradingVector[4]].isNull())
        {
            status_ = std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if (!pJson[pMasqueradingVector[5]].isNull())
        {
            hashSum_ = std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if (!pJson[pMasqueradingVector[6]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[6]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if (!pJson[pMasqueradingVector[7]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[7]].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

void Files::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if (pJson.isMember("_id"))
    {
        if (!pJson["_id"].isNull())
        {
            Id_ = std::make_shared<int32_t>((int32_t)pJson["_id"].asInt64());
        }
    }
    if (pJson.isMember("user_id"))
    {
        dirtyFlag_[1] = true;
        if (!pJson["user_id"].isNull())
        {
            userId_ = std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if (pJson.isMember("path"))
    {
        dirtyFlag_[2] = true;
        if (!pJson["path"].isNull())
        {
            path_ = std::make_shared<std::string>(pJson["path"].asString());
        }
    }
    if (pJson.isMember("filename"))
    {
        dirtyFlag_[3] = true;
        if (!pJson["filename"].isNull())
        {
            filename_ = std::make_shared<std::string>(pJson["filename"].asString());
        }
    }
    if (pJson.isMember("status"))
    {
        dirtyFlag_[4] = true;
        if (!pJson["status"].isNull())
        {
            status_ = std::make_shared<std::string>(pJson["status"].asString());
        }
    }
    if (pJson.isMember("hash_sum"))
    {
        dirtyFlag_[5] = true;
        if (!pJson["hash_sum"].isNull())
        {
            hashSum_ = std::make_shared<std::string>(pJson["hash_sum"].asString());
        }
    }
    if (pJson.isMember("updated_at"))
    {
        dirtyFlag_[6] = true;
        if (!pJson["updated_at"].isNull())
        {
            auto timeStr = pJson["updated_at"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                updatedAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
    if (pJson.isMember("created_at"))
    {
        dirtyFlag_[7] = true;
        if (!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm, 0, sizeof(stm));
            auto p = strptime(timeStr.c_str(), "%Y-%m-%d %H:%M:%S", &stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if (p)
            {
                if (*p == '.')
                {
                    std::string decimals(p + 1, &timeStr[timeStr.length()]);
                    while (decimals.length() < 6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_ = std::make_shared<::trantor::Date>(t * 1000000 + decimalNum);
            }
        }
    }
}

const int32_t &Files::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if (Id_)
        return *Id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Files::getId() const noexcept
{
    return Id_;
}
void Files::setId(const int32_t &pId) noexcept
{
    Id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Files::PrimaryKeyType &Files::getPrimaryKey() const
{
    assert(Id_);
    return *Id_;
}

const int32_t &Files::getValueOfUserId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if (userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Files::getUserId() const noexcept
{
    return userId_;
}
void Files::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[1] = true;
}

const std::string &Files::getValueOfPath() const noexcept
{
    const static std::string defaultValue = std::string();
    if (path_)
        return *path_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Files::getPath() const noexcept
{
    return path_;
}
void Files::setPath(const std::string &pPath) noexcept
{
    path_ = std::make_shared<std::string>(pPath);
    dirtyFlag_[2] = true;
}
void Files::setPath(std::string &&pPath) noexcept
{
    path_ = std::make_shared<std::string>(std::move(pPath));
    dirtyFlag_[2] = true;
}

const std::string &Files::getValueOfFilename() const noexcept
{
    const static std::string defaultValue = std::string();
    if (filename_)
        return *filename_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Files::getFilename() const noexcept
{
    return filename_;
}
void Files::setFilename(const std::string &pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(pFilename);
    dirtyFlag_[3] = true;
}
void Files::setFilename(std::string &&pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(std::move(pFilename));
    dirtyFlag_[3] = true;
}

const std::string &Files::getValueOfStatus() const noexcept
{
    const static std::string defaultValue = std::string();
    if (status_)
        return *status_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Files::getStatus() const noexcept
{
    return status_;
}
void Files::setStatus(const std::string &pStatus) noexcept
{
    status_ = std::make_shared<std::string>(pStatus);
    dirtyFlag_[4] = true;
}
void Files::setStatus(std::string &&pStatus) noexcept
{
    status_ = std::make_shared<std::string>(std::move(pStatus));
    dirtyFlag_[4] = true;
}

const std::string &Files::getValueOfHashSum() const noexcept
{
    const static std::string defaultValue = std::string();
    if (hashSum_)
        return *hashSum_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Files::getHashSum() const noexcept
{
    return hashSum_;
}
void Files::setHashSum(const std::string &pHashSum) noexcept
{
    hashSum_ = std::make_shared<std::string>(pHashSum);
    dirtyFlag_[5] = true;
}
void Files::setHashSum(std::string &&pHashSum) noexcept
{
    hashSum_ = std::make_shared<std::string>(std::move(pHashSum));
    dirtyFlag_[5] = true;
}

const ::trantor::Date &Files::getValueOfUpdatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if (updatedAt_)
        return *updatedAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Files::getUpdatedAt() const noexcept
{
    return updatedAt_;
}
void Files::setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept
{
    updatedAt_ = std::make_shared<::trantor::Date>(pUpdatedAt);
    dirtyFlag_[6] = true;
}

const ::trantor::Date &Files::getValueOfCreatedAt() const noexcept
{
    const static ::trantor::Date defaultValue = ::trantor::Date();
    if (createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Files::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Files::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[7] = true;
}

void Files::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Files::insertColumns() noexcept
{
    static const std::vector<std::string> inCols = {
        "user_id",
        "path",
        "filename",
        "status",
        "hash_sum",
        "updated_at",
        "created_at"};
    return inCols;
}

void Files::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getHashSum())
        {
            binder << getValueOfHashSum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6])
    {
        if (getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7])
    {
        if (getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Files::updateColumns() const
{
    std::vector<std::string> ret;
    if (dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if (dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if (dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if (dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if (dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if (dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if (dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    return ret;
}

void Files::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if (dirtyFlag_[1])
    {
        if (getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[2])
    {
        if (getPath())
        {
            binder << getValueOfPath();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[3])
    {
        if (getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[4])
    {
        if (getStatus())
        {
            binder << getValueOfStatus();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[5])
    {
        if (getHashSum())
        {
            binder << getValueOfHashSum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[6])
    {
        if (getUpdatedAt())
        {
            binder << getValueOfUpdatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if (dirtyFlag_[7])
    {
        if (getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Files::toJson() const
{
    Json::Value ret;
    if (getId())
    {
        ret["_id"] = getValueOfId();
    }
    else
    {
        ret["_id"] = Json::Value();
    }
    if (getUserId())
    {
        ret["user_id"] = getValueOfUserId();
    }
    else
    {
        ret["user_id"] = Json::Value();
    }
    if (getPath())
    {
        ret["path"] = getValueOfPath();
    }
    else
    {
        ret["path"] = Json::Value();
    }
    if (getFilename())
    {
        ret["filename"] = getValueOfFilename();
    }
    else
    {
        ret["filename"] = Json::Value();
    }
    if (getStatus())
    {
        ret["status"] = getValueOfStatus();
    }
    else
    {
        ret["status"] = Json::Value();
    }
    if (getHashSum())
    {
        ret["hash_sum"] = getValueOfHashSum();
    }
    else
    {
        ret["hash_sum"] = Json::Value();
    }
    if (getUpdatedAt())
    {
        ret["updated_at"] = getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"] = Json::Value();
    }
    if (getCreatedAt())
    {
        ret["created_at"] = getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"] = Json::Value();
    }
    return ret;
}

Json::Value Files::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if (pMasqueradingVector.size() == 8)
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (getId())
            {
                ret[pMasqueradingVector[0]] = getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (getUserId())
            {
                ret[pMasqueradingVector[1]] = getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[1]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (getPath())
            {
                ret[pMasqueradingVector[2]] = getValueOfPath();
            }
            else
            {
                ret[pMasqueradingVector[2]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (getFilename())
            {
                ret[pMasqueradingVector[3]] = getValueOfFilename();
            }
            else
            {
                ret[pMasqueradingVector[3]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (getStatus())
            {
                ret[pMasqueradingVector[4]] = getValueOfStatus();
            }
            else
            {
                ret[pMasqueradingVector[4]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[5].empty())
        {
            if (getHashSum())
            {
                ret[pMasqueradingVector[5]] = getValueOfHashSum();
            }
            else
            {
                ret[pMasqueradingVector[5]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[6].empty())
        {
            if (getUpdatedAt())
            {
                ret[pMasqueradingVector[6]] = getUpdatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[6]] = Json::Value();
            }
        }
        if (!pMasqueradingVector[7].empty())
        {
            if (getCreatedAt())
            {
                ret[pMasqueradingVector[7]] = getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[7]] = Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if (getId())
    {
        ret["_id"] = getValueOfId();
    }
    else
    {
        ret["_id"] = Json::Value();
    }
    if (getUserId())
    {
        ret["user_id"] = getValueOfUserId();
    }
    else
    {
        ret["user_id"] = Json::Value();
    }
    if (getPath())
    {
        ret["path"] = getValueOfPath();
    }
    else
    {
        ret["path"] = Json::Value();
    }
    if (getFilename())
    {
        ret["filename"] = getValueOfFilename();
    }
    else
    {
        ret["filename"] = Json::Value();
    }
    if (getStatus())
    {
        ret["status"] = getValueOfStatus();
    }
    else
    {
        ret["status"] = Json::Value();
    }
    if (getHashSum())
    {
        ret["hash_sum"] = getValueOfHashSum();
    }
    else
    {
        ret["hash_sum"] = Json::Value();
    }
    if (getUpdatedAt())
    {
        ret["updated_at"] = getUpdatedAt()->toDbStringLocal();
    }
    else
    {
        ret["updated_at"] = Json::Value();
    }
    if (getCreatedAt())
    {
        ret["created_at"] = getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"] = Json::Value();
    }
    return ret;
}

bool Files::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("_id"))
    {
        if (!validJsonOfField(0, "_id", pJson["_id"], err, true))
            return false;
    }
    if (pJson.isMember("user_id"))
    {
        if (!validJsonOfField(1, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err = "The user_id column cannot be null";
        return false;
    }
    if (pJson.isMember("path"))
    {
        if (!validJsonOfField(2, "path", pJson["path"], err, true))
            return false;
    }
    else
    {
        err = "The path column cannot be null";
        return false;
    }
    if (pJson.isMember("filename"))
    {
        if (!validJsonOfField(3, "filename", pJson["filename"], err, true))
            return false;
    }
    else
    {
        err = "The filename column cannot be null";
        return false;
    }
    if (pJson.isMember("status"))
    {
        if (!validJsonOfField(4, "status", pJson["status"], err, true))
            return false;
    }
    if (pJson.isMember("hash_sum"))
    {
        if (!validJsonOfField(5, "hash_sum", pJson["hash_sum"], err, true))
            return false;
    }
    else
    {
        err = "The hash_sum column cannot be null";
        return false;
    }
    if (pJson.isMember("updated_at"))
    {
        if (!validJsonOfField(6, "updated_at", pJson["updated_at"], err, true))
            return false;
    }
    if (pJson.isMember("created_at"))
    {
        if (!validJsonOfField(7, "created_at", pJson["created_at"], err, true))
            return false;
    }
    return true;
}
bool Files::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if (pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty())
        {
            if (pJson.isMember(pMasqueradingVector[0]))
            {
                if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[1].empty())
        {
            if (pJson.isMember(pMasqueradingVector[1]))
            {
                if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[1] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[2].empty())
        {
            if (pJson.isMember(pMasqueradingVector[2]))
            {
                if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[2] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[3].empty())
        {
            if (pJson.isMember(pMasqueradingVector[3]))
            {
                if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[3] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[4].empty())
        {
            if (pJson.isMember(pMasqueradingVector[4]))
            {
                if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[5].empty())
        {
            if (pJson.isMember(pMasqueradingVector[5]))
            {
                if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                    return false;
            }
            else
            {
                err = "The " + pMasqueradingVector[5] + " column cannot be null";
                return false;
            }
        }
        if (!pMasqueradingVector[6].empty())
        {
            if (pJson.isMember(pMasqueradingVector[6]))
            {
                if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                    return false;
            }
        }
        if (!pMasqueradingVector[7].empty())
        {
            if (pJson.isMember(pMasqueradingVector[7]))
            {
                if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                    return false;
            }
        }
    }
    catch (const Json::LogicError &e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool Files::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if (pJson.isMember("_id"))
    {
        if (!validJsonOfField(0, "_id", pJson["_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if (pJson.isMember("user_id"))
    {
        if (!validJsonOfField(1, "user_id", pJson["user_id"], err, false))
            return false;
    }
    if (pJson.isMember("path"))
    {
        if (!validJsonOfField(2, "path", pJson["path"], err, false))
            return false;
    }
    if (pJson.isMember("filename"))
    {
        if (!validJsonOfField(3, "filename", pJson["filename"], err, false))
            return false;
    }
    if (pJson.isMember("status"))
    {
        if (!validJsonOfField(4, "status", pJson["status"], err, false))
            return false;
    }
    if (pJson.isMember("hash_sum"))
    {
        if (!validJsonOfField(5, "hash_sum", pJson["hash_sum"], err, false))
            return false;
    }
    if (pJson.isMember("updated_at"))
    {
        if (!validJsonOfField(6, "updated_at", pJson["updated_at"], err, false))
            return false;
    }
    if (pJson.isMember("created_at"))
    {
        if (!validJsonOfField(7, "created_at", pJson["created_at"], err, false))
            return false;
    }
    return true;
}
bool Files::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if (pMasqueradingVector.size() != 8)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try
    {
        if (!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
        {
            if (!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
                return false;
        }
        else
        {
            err = "The value of primary key must be set in the json object for update";
            return false;
        }
        if (!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
        {
            if (!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
                return false;
        }
        if (!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
        {
            if (!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
                return false;
        }
        if (!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
        {
            if (!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
                return false;
        }
        if (!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
        {
            if (!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
                return false;
        }
        if (!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
        {
            if (!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
                return false;
        }
        if (!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
        {
            if (!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
                return false;
        }
        if (!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
        {
            if (!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
                return false;
        }
    }
    catch (const Json::LogicError &e)
    {
        err = e.what();
        return false;
    }
    return true;
}
bool Files::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch (index)
    {
    case 0:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (isForCreation)
        {
            err = "The automatic primary key cannot be set";
            return false;
        }
        if (!pJson.isInt())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 1:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isInt())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 2:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 3:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 4:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 5:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 6:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    case 7:
        if (pJson.isNull())
        {
            err = "The " + fieldName + " column cannot be null";
            return false;
        }
        if (!pJson.isString())
        {
            err = "Type error in the " + fieldName + " field";
            return false;
        }
        break;
    default:
        err = "Internal error in the server";
        return false;
    }
    return true;
}
