/**
 *
 *  Files.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
    namespace orm
    {
        class DbClient;
        using DbClientPtr = std::shared_ptr<DbClient>;
    }
}
namespace drogon_model
{
    namespace sync_cloud
    {

        class Files
        {
        public:
            struct Cols
            {
                static const std::string __id;
                static const std::string _user_id;
                static const std::string _path;
                static const std::string _filename;
                static const std::string _status;
                static const std::string _hash_sum;
                static const std::string _updated_at;
                static const std::string _created_at;
            };

            const static int primaryKeyNumber;
            const static std::string tableName;
            const static bool hasPrimaryKey;
            const static std::string primaryKeyName;
            using PrimaryKeyType = int32_t;
            const PrimaryKeyType &getPrimaryKey() const;

            /**
             * @brief constructor
             * @param r One row of records in the SQL query result.
             * @param indexOffset Set the offset to -1 to access all columns by column names,
             * otherwise access all columns by offsets.
             * @note If the SQL is not a style of 'select * from table_name ...' (select all
             * columns by an asterisk), please set the offset to -1.
             */
            explicit Files(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

            /**
             * @brief constructor
             * @param pJson The json object to construct a new instance.
             */
            explicit Files(const Json::Value &pJson) noexcept(false);

            /**
             * @brief constructor
             * @param pJson The json object to construct a new instance.
             * @param pMasqueradingVector The aliases of table columns.
             */
            Files(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

            Files() = default;

            void updateByJson(const Json::Value &pJson) noexcept(false);
            void updateByMasqueradedJson(const Json::Value &pJson,
                                         const std::vector<std::string> &pMasqueradingVector) noexcept(false);
            static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
            static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                           const std::vector<std::string> &pMasqueradingVector,
                                                           std::string &err);
            static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
            static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                                         const std::vector<std::string> &pMasqueradingVector,
                                                         std::string &err);
            static bool validJsonOfField(size_t index,
                                         const std::string &fieldName,
                                         const Json::Value &pJson,
                                         std::string &err,
                                         bool isForCreation);

            /**  For column _id  */
            /// Get the value of the column _id, returns the default value if the column is null
            const int32_t &getValueOfId() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<int32_t> &getId() const noexcept;
            /// Set the value of the column _id
            void setId(const int32_t &pId) noexcept;

            /**  For column user_id  */
            /// Get the value of the column user_id, returns the default value if the column is null
            const int32_t &getValueOfUserId() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<int32_t> &getUserId() const noexcept;
            /// Set the value of the column user_id
            void setUserId(const int32_t &pUserId) noexcept;

            /**  For column path  */
            /// Get the value of the column path, returns the default value if the column is null
            const std::string &getValueOfPath() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<std::string> &getPath() const noexcept;
            /// Set the value of the column path
            void setPath(const std::string &pPath) noexcept;
            void setPath(std::string &&pPath) noexcept;

            /**  For column filename  */
            /// Get the value of the column filename, returns the default value if the column is null
            const std::string &getValueOfFilename() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<std::string> &getFilename() const noexcept;
            /// Set the value of the column filename
            void setFilename(const std::string &pFilename) noexcept;
            void setFilename(std::string &&pFilename) noexcept;

            /**  For column status  */
            /// Get the value of the column status, returns the default value if the column is null
            const std::string &getValueOfStatus() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<std::string> &getStatus() const noexcept;
            /// Set the value of the column status
            void setStatus(const std::string &pStatus) noexcept;
            void setStatus(std::string &&pStatus) noexcept;

            /**  For column hash_sum  */
            /// Get the value of the column hash_sum, returns the default value if the column is null
            const std::string &getValueOfHashSum() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<std::string> &getHashSum() const noexcept;
            /// Set the value of the column hash_sum
            void setHashSum(const std::string &pHashSum) noexcept;
            void setHashSum(std::string &&pHashSum) noexcept;

            /**  For column updated_at  */
            /// Get the value of the column updated_at, returns the default value if the column is null
            const ::trantor::Date &getValueOfUpdatedAt() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<::trantor::Date> &getUpdatedAt() const noexcept;
            /// Set the value of the column updated_at
            void setUpdatedAt(const ::trantor::Date &pUpdatedAt) noexcept;

            /**  For column created_at  */
            /// Get the value of the column created_at, returns the default value if the column is null
            const ::trantor::Date &getValueOfCreatedAt() const noexcept;
            /// Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
            const std::shared_ptr<::trantor::Date> &getCreatedAt() const noexcept;
            /// Set the value of the column created_at
            void setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept;

            static size_t getColumnNumber() noexcept { return 8; }
            static const std::string &getColumnName(size_t index) noexcept(false);

            Json::Value toJson() const;
            Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
            /// Relationship interfaces
        private:
            friend drogon::orm::Mapper<Files>;
#ifdef __cpp_impl_coroutine
            friend drogon::orm::CoroMapper<Files>;
#endif
            static const std::vector<std::string> &insertColumns() noexcept;
            void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
            const std::vector<std::string> updateColumns() const;
            void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
            /// For mysql or sqlite3
            void updateId(const uint64_t id);
            std::shared_ptr<int32_t> Id_;
            std::shared_ptr<int32_t> userId_;
            std::shared_ptr<std::string> path_;
            std::shared_ptr<std::string> filename_;
            std::shared_ptr<std::string> status_;
            std::shared_ptr<std::string> hashSum_;
            std::shared_ptr<::trantor::Date> updatedAt_;
            std::shared_ptr<::trantor::Date> createdAt_;
            struct MetaData
            {
                const std::string colName_;
                const std::string colType_;
                const std::string colDatabaseType_;
                const ssize_t colLength_;
                const bool isAutoVal_;
                const bool isPrimaryKey_;
                const bool notNull_;
            };
            static const std::vector<MetaData> metaData_;
            bool dirtyFlag_[8] = {false};

        public:
            static const std::string &sqlForFindingByPrimaryKey()
            {
                static const std::string sql = "select * from " + tableName + " where _id = $1";
                return sql;
            }

            static const std::string &sqlForDeletingByPrimaryKey()
            {
                static const std::string sql = "delete from " + tableName + " where _id = $1";
                return sql;
            }
            std::string sqlForInserting(bool &needSelection) const
            {
                std::string sql = "insert into " + tableName + " (";
                size_t parametersCount = 0;
                needSelection = false;
                sql += "_id,";
                ++parametersCount;
                if (dirtyFlag_[1])
                {
                    sql += "user_id,";
                    ++parametersCount;
                }
                if (dirtyFlag_[2])
                {
                    sql += "path,";
                    ++parametersCount;
                }
                if (dirtyFlag_[3])
                {
                    sql += "filename,";
                    ++parametersCount;
                }
                sql += "status,";
                ++parametersCount;
                if (!dirtyFlag_[4])
                {
                    needSelection = true;
                }
                if (dirtyFlag_[5])
                {
                    sql += "hash_sum,";
                    ++parametersCount;
                }
                sql += "updated_at,";
                ++parametersCount;
                if (!dirtyFlag_[6])
                {
                    needSelection = true;
                }
                sql += "created_at,";
                ++parametersCount;
                if (!dirtyFlag_[7])
                {
                    needSelection = true;
                }
                needSelection = true;
                if (parametersCount > 0)
                {
                    sql[sql.length() - 1] = ')';
                    sql += " values (";
                }
                else
                    sql += ") values (";

                int placeholder = 1;
                char placeholderStr[64];
                size_t n = 0;
                sql += "default,";
                if (dirtyFlag_[1])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                if (dirtyFlag_[2])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                if (dirtyFlag_[3])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                if (dirtyFlag_[4])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                else
                {
                    sql += "default,";
                }
                if (dirtyFlag_[5])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                if (dirtyFlag_[6])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                else
                {
                    sql += "default,";
                }
                if (dirtyFlag_[7])
                {
                    n = sprintf(placeholderStr, "$%d,", placeholder++);
                    sql.append(placeholderStr, n);
                }
                else
                {
                    sql += "default,";
                }
                if (parametersCount > 0)
                {
                    sql.resize(sql.length() - 1);
                }
                if (needSelection)
                {
                    sql.append(") returning *");
                }
                else
                {
                    sql.append(1, ')');
                }
                LOG_TRACE << sql;
                return sql;
            }
        };
    } // namespace sync_cloud
} // namespace drogon_model
